service: invest-tracker-api
app: invest-tracker
#org: silas-stoffel

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '^4.15.0'

plugins:
  - serverless-offline

custom:
    serverless-offline:
        noPrependStageInUrl: true

provider:
  name: aws
  runtime: provided.al2023
  architecture: x86_64

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: us-east-1

  logRetentionInDays: 1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "sqs:SendMessage"
#          Resource:
#            - Fn::GetAtt: [createInvestmentQueue, Arn]
  

package:
  individually: true
  patterns:
    - '!./**'
    - ./bin/**

resources:
  Resources:

    createInvestmentQueueDQL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: create-investment-${opt:stage, 'dev'}-dlq

    createInvestmentQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: create-investment-${opt:stage, 'dev'}
        VisibilityTimeout: 30
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [createInvestmentQueueDQL, Arn]
          maxReceiveCount: 3

    calculateAveragePriceQueueDQL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: calculate-average-price-${opt:stage, 'dev'}-dlq.fifo
        FifoQueue: true

    calculateAveragePriceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: calculate-average-price-${opt:stage, 'dev'}.fifo
        FifoQueue: true
        VisibilityTimeout: 90
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [calculateAveragePriceQueueDQL, Arn]
          maxReceiveCount: 10

    scheduleInvestmentLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ScheduleInvestmentPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [createInvestmentQueue, Arn]
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"

    createInvestmentLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CreateInvestmentLambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource:
                    - Fn::GetAtt: [createInvestmentQueue, Arn]
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                  Resource:
                    - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/invest-track-${opt:stage}/cloudflare/*
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [createInvestmentQueueDQL, Arn]
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [calculateAveragePriceQueue, Arn]                    

    calculateAveragePriceLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CalculateAveragePriceLambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource:
                    - Fn::GetAtt: [calculateAveragePriceQueue, Arn]
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                  Resource:
                    - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/invest-track-${opt:stage}/cloudflare/*
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - Fn::GetAtt: [calculateAveragePriceQueueDQL, Arn]                     

functions:
  schedule-investment:
    description: "Lambda function to schedule investments"
    role: scheduleInvestmentLambdaRole
    handler: bin/bootstrap
    name: schedule-investment-${opt:stage, 'dev'}
    memorySize: 128	
    environment:
      ENVIRONMENT: ${opt:stage, 'dev'}
      CREATE_INVESTMENT_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/${aws:accountId}/create-investment-${opt:stage, 'dev'}
    package:
      artifact: ./bin/schedule-investment.zip
    events:
      - http:
          path: /investments/schedule
          method: post

  create-investment:
    description: "Lambda function to create investments"
    role: createInvestmentLambdaRole
    handler: bin/bootstrap
    name: create-investment-${opt:stage, 'dev'}
    memorySize: 256
    timeout: 30
    environment:
      ENVIRONMENT: ${opt:stage, 'dev'}
      CLOUDFLARE_ACCOUNT_ID_DEV: b3262b1ed9d85abab8621e13d0aba2aa
      CLOUDFLARE_ACCOUNT_ID_PROD: 4bb3c96a08e81f83a23daa00259c7bb2
      CLOUDFLARE_DB_ID_DEV: e256f11a-1b2e-4add-bcec-36697eb80eec
      CLOUDFLARE_DB_ID_PROD: b3b7b94b-a93e-4a3c-ba0c-ae4567beb9d1
      CALCULATE_AVERAGE_PRICE_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/${aws:accountId}/calculate-average-price-${opt:stage, 'dev'}.fifo
    package: 
      artifact: ./bin/create-investment.zip
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - createInvestmentQueue
              - Arn
          batchSize: 5
          maximumBatchingWindow: 5
          functionResponseType: ReportBatchItemFailures

  calculate-average-price:
    description: "Lambda function to calculate average price"
    role: calculateAveragePriceLambdaRole
    handler: bin/bootstrap
    name: calculate-average-price-${opt:stage, 'dev'}
    memorySize: 256
    timeout: 90
    environment:
      ENVIRONMENT: ${opt:stage, 'dev'}
      CLOUDFLARE_ACCOUNT_ID_DEV: b3262b1ed9d85abab8621e13d0aba2aa
      CLOUDFLARE_ACCOUNT_ID_PROD: 4bb3c96a08e81f83a23daa00259c7bb2
      CLOUDFLARE_DB_ID_DEV: e256f11a-1b2e-4add-bcec-36697eb80eec
      CLOUDFLARE_DB_ID_PROD: b3b7b94b-a93e-4a3c-ba0c-ae4567beb9d1
    package: 
      artifact: ./bin/calculate-average-price.zip
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - calculateAveragePriceQueue
              - Arn
          batchSize: 5
          maximumBatchingWindow: 5
          functionResponseType: ReportBatchItemFailures