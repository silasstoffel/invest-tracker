/**
 * Script Generated by Gemini.
 * 
 * How importer some data?
 * 
 * 1. Set API_URL const from your schedule investment endpoint
 * 2. Set csvDate cont with the CSV in this format: "symbol,operationDate,quantity,totalValue,cost,type,operationType,brokerage,bondIndex,bondRate,dueDate,note,redemptionPolicyType"
 * 3. Run node script: node scripts/importer.js 
 */

const API_URL = 'https://XXXXXXX.execute-api.us-east-1.amazonaws.com/prod/investments/schedule';

const csvData = `symbol,operationDate,quantity,totalValue,cost,type,operationType,brokerage,bondIndex,bondRate,dueDate,note,redemptionPolicyType
LCA PRE BOCOM,2023-04-13,1,"1.002,97","0,00",bond,buy,banco inter,prefixed,"11,3",2026-04-06,inter_import,at_maturity
LCA PRE BOCOM,2023-05-05,1,"1.005,94","0,00",bond,buy,banco inter,prefixed,"11,25",2027-04-13,inter_import,at_maturity
LCI IPCA BARI,2023-06-20,1,"1.000,00","0,00",bond,buy,banco inter,ipca,"5,25",2027-06-21,inter_import,at_maturity
LCA PRE BTG,2022-02-21,1,"1.884,00","0,00",bond,buy,banco inter,prefixed,11,2028-01-19,inter_import,at_maturity
LCA PRE BTG,2022-02-21,1,"942,00","0,00",bond,buy,banco inter,prefixed,11,2028-01-19,inter_import,at_maturity
LCA PRE BTG,2023-08-16,1,"2.293,20","0,00",bond,buy,banco inter,prefixed,"10,06",2028-01-27,inter_import,at_maturity
LCA PRE BTG,2024-10-22,1,"3.041,89","0,00",bond,buy,banco inter,prefixed,"10,5",2028-09-01,inter_import,at_maturity
LCA PRE SICREDI,2023-09-15,1,"1.272,01","0,00",bond,buy,banco inter,prefixed,"10,5",2029-11-13,inter_import,at_maturity
LCA PRE SICREDI,2023-07-28,1,"1.216,46","0,00",bond,buy,banco inter,prefixed,"10,6",2029-11-13,inter_import,at_maturity
LCA PRE SICREDI,2023-12-19,1,"3.856,33","0,00",bond,buy,banco inter,prefixed,"10,3",2029-11-13,inter_import,at_maturity`;



function parseBrazilianNumber(value) {
    if (typeof value !== 'string' || value === '') {
        return value; // Retorna o valor original se não for string ou for vazio
    }
    // Remove os pontos de milhar e substitui a vírgula decimal por ponto.
    return parseFloat(value.replace(/\./g, '').replace(',', '.'));
}

async function sendCsvDataToApi() {
    const lines = csvData.trim().split('\n');
    const headers = lines[0].split(',').map(header => header.trim());
    const dataRows = lines.slice(1);

    for (const row of dataRows) {
        const values = row.match(/(".*?"|[^",]*)(?:,|$)/g)
                          .map(val => val.replace(/,$/, '').replace(/^"|"$/g, '').trim());

        const postData = {};
        headers.forEach((header, index) => {
            let value = values[index];

            if (header === 'quantity') {
                postData[header] = value !== '' ? parseInt(value, 10) : '';
            } else if (header === 'totalValue' || header === 'cost' || header === 'bondRate') {
                postData[header] = parseBrazilianNumber(value);
            } else {
                postData[header] = value;
            }
        });

        try {
            console.log('Sending data:', JSON.stringify(postData, null, 2));
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(postData)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }

            const result = await response.json();
            console.log('API response to ', postData.symbol, ':', result);

        } catch (error) {
            console.error('Failure to send request to ', postData.symbol, ':', error);
        }
    }
    console.log('Finished successful.');
}


sendCsvDataToApi();